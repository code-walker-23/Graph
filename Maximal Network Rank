class Graph{
	int V;
	vector<int> *l;

public:

	Graph(int v){
		V = v;
		l = new vector<int>[V];
	}

	void addEdge(int i, int j,bool undir = true){
		l[i].push_back(j);
		if(undir)
			l[j].push_back(i);
	}

	void printAdjList(){
		for(int i = 0; i < V; i++){
			cout << i << ": ";
			for(auto x : l[i])
				cout << x << " ";
			cout << endl;
	    }

	}
    int traverse(int i){
        return l[i].size();
    }
    
    bool checkEdge(int x , int y){
        for(int i = 0; i < l[x].size(); i++)
            if(l[x][i] == y)return true;
        
        return false;
    }
    

};
class Solution {
public:
    int maximalNetworkRank(int n, vector<vector<int>>& roads) {
        Graph g(n);
        for(auto road : roads){
            int x = road[0];
            int y = road[1];
            g.addEdge(x,y);
        }
        vector<int> v(n);
        for(int i = 0; i < n; i++){
            v[i] = g.traverse(i);
        }
        int glb_max = 0;
        for(int i = 0; i < n-1; i++){
            int max = 0;
            for(int j = i+1; j < n; j++){
                int sum = v[i]+v[j];
                if(g.checkEdge(i,j))sum -= 1;
                if(sum > max)max = sum;
            }
            if(max > glb_max)
                glb_max = max;
        }

        
        return glb_max;
    }
};